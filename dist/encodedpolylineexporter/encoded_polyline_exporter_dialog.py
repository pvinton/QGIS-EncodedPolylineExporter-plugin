"""
/***************************************************************************
 encodedPolylineExporterDialog
                                 A QGIS plugin
 Export a vector layer to a .csv file in Encoded Polyline format, with optional geometry simplification
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-08-23
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Patrick Vinton
        email                : patrickvinton@hotmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis import core, gui
from PyQt5 import uic, QtWidgets
from PyQt5.QtWidgets import QFileDialog

from .ui_encodedpolyline import Ui_encodedPolyline
from .encoded_polyline_exporter_csv import encodedPolylineExport


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'encoded_polyline_exporter_dialog_base.ui'))

class EncodedPolylineExporterDialog(Ui_encodedPolyline):
    def __init__(self, iface):
        super(EncodedPolylineExporterDialog, self).__init__();
        self.iface = iface
        self.setupUi(self)
        self.outputFileBrowse.clicked.connect(self.browseOutputFile)
        self.buttonBox.accepted.connect(self.run)
        self.sourceLayer.currentIndexChanged.connect(self.updateOutputFieldPrefix)

        load_combo_box_with_vector_layers(self.iface, self.sourceLayer, True)
        
        #message =  os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
        paramsFile = os.path.dirname(__file__) + "/LastOutputFileLocation.txt"
        if not os.path.exists(paramsFile):
            with open(paramsFile, 'w'): pass

        with open(paramsFile, 'r') as f:
            lastExportLocation = f.read()
        
        #qgis.mainWindow().statusBar().showMessage(message)
        #self.iface.messageBar().pushMessage(message, 0, 5)

        
        if self.sourceLayer.currentText().__len__() == 0:
            #self.outputFilename.setText(os.getcwd() + "/Boundaries.csv")
            self.outputFilename.setText(lastExportLocation + "/Boundaries.csv")
        else:
            #self.outputFilename.setText(os.getcwd() + "/" + self.sourceLayer.currentText() + ".csv")
            self.outputFilename.setText(lastExportLocation + "/" + self.sourceLayer.currentText() + ".csv")

    def browseOutputFile(self):
        newname = QFileDialog.getSaveFileName(self, "Output CSV File", self.outputFilename.displayText(), "CSV File (*.csv)")[0]

        if newname != None:
            self.outputFilename.setText(newname)    

    def updateOutputFieldPrefix(self):
        paramsFile = os.path.dirname(__file__) + "/LastOutputFileLocation.txt"
        with open(paramsFile, 'r') as f:
            lastExportLocation = f.read()
    
        layer = find_layer(self.sourceLayer.currentText())
        #self.outputFilename.setText(os.getcwd() + "/" + self.sourceLayer.currentText() + ".csv")
        self.outputFilename.setText(lastExportLocation + "/" + self.sourceLayer.currentText() + ".csv")
        self.outputFieldPrefix.setText(self.sourceLayer.currentText())
        

                
    def run(self):
        delimiter = ","
        lineterminator = "\n"
        sourceLayer = self.sourceLayer.currentText()
        outputFilename = self.outputFilename.displayText()
        outputFieldPrefix = self.outputFieldPrefix.displayText()
        
        message = encodedPolylineExport(self.iface, sourceLayer, outputFilename, outputFieldPrefix, delimiter, lineterminator)
        if message != None:
            gui.QgsMessageBarItem("Geometry Export", core.Qgis.Info)


def load_combo_box_with_vector_layers(qgis, combo_box, set_selected):
    for name, layer in list(core.QgsProject.instance().mapLayers().items()):
        if layer.type() == core.QgsMapLayer.VectorLayer:
            combo_box.addItem(layer.name())
    
    # if (type(set_selected) != bool):
    #     combo_index = combo_box.findText(set_selected)
    #     if combo_index >= 0:
    #         combo_box.setCurrentIndex(combo_index)
    #         return;

    # for index, layer in enumerate(qgis.legendInterface().selectedLayers()):
    #     combo_index = combo_box.findText(layer.name())
    #     if combo_index >= 0:
    #         combo_box.setCurrentIndex(combo_index)
    #         break;


def find_layer(layer_name):
    # print "find_layer(" + str(layer_name) + ")"

    for name, search_layer in list(core.QgsProject.instance().mapLayers().items()):
        if search_layer.name() == layer_name:
            return search_layer

    return None
